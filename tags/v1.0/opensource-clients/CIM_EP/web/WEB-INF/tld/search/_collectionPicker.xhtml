<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>
<html xmlns='http://www.w3.org/1999/xhtml'
	xmlns:h='http://java.sun.com/jsf/html'
	xmlns:f='http://java.sun.com/jsf/core'
	xmlns:rich='http://richfaces.org/rich'
	xmlns:spb='http://www.spacebel.be/genesis/jsf'
	xmlns:a4j='http://richfaces.org/a4j'
	xmlns:p='http://primefaces.prime.com.tr/ui'
	xmlns:ui='http://java.sun.com/jsf/facelets'>

<ui:composition>
	<a4j:outputPanel rendered="#{not empty root}" layout="block"
		styleClass="collection-picker">
		<fieldset>
			<legend>
				<h:outputText value="Collections" />
				<input type="text" class="col-pick-watermark" placeholder="Filter" />							
			</legend>
			<a4j:outputPanel layout="block" style="height: 150px; overflow: auto"
				id="collection-picker-panel">
				<p:tree widgetVar="collection_picker" value="#{root}"
					selectionMode="checkbox" selection="#{selection}" var="node"
					propagateSelectionUp="true" propagateSelectionDown="true">
					<p:treeNode type="default">
						<ui:include src="/WEB-INF/tld/search/_collectionPickerNode.xhtml">
							<ui:param name="node" value="#{node}" />
							<ui:param name="present" value="#{present}" />
						</ui:include>
					</p:treeNode>
					<p:treeNode type="selected" styleClass="nodeselected">
						<ui:include src="/WEB-INF/tld/search/_collectionPickerNode.xhtml">
							<ui:param name="node" value="#{node}" />
							<ui:param name="present" value="#{present}" />
						</ui:include>
					</p:treeNode>
				</p:tree>
			</a4j:outputPanel>
		</fieldset>

		<script type="text/javascript">
	
		function collection_picker_present(data){
			var json = Object.toJSON(data);
			SPBEventing.fireEvent(SPBEventing.constants.EVENT_DOPRESENT,json);
		}
		
	    jQuery(function() {
		   var not_the_checkbox='not-the-checkbox';

		   // function filtering the YUI TreeView generated by primefaces
		   // @author jpr
		   var handleChildren = function(children, filter){
			    // number of children at this level
			    var childrenCount = 0;
				for (var i=0; isLessThanNumber(i, children.length); i++){
					var node = children[i];
					// the tr element that we will hide if the node is filtered out
					var rowElem = jQuery('#' + node.contentElId).parent();
					var keywords = filter.split(' ');
					// extracting the label of the node from the node html
					var tempDiv = jQuery('<div></div>');
					tempDiv.html(node.getNodeDefinition().html);
					var label = jQuery('.' + not_the_checkbox, tempDiv).html();
					// testing the label
					var remove = false;
					for(var j = 0;isLessThanNumber(j, keywords.length); j++) {
						var keyword = keywords[j];
						// case insensitive regexp test
						var reg = new RegExp(keyword, 'i');
						if(!reg.test(label)){
							remove = true;
							break;
						}
					}
					if(!node.isLeaf){
						// expand the directory
						node.expanded = 'true';
						// if the directory matches the filter, we don't filter its content
						if(!remove){
							childrenCount++;
						} else {
							// filtering children and counting them
							var count = handleChildren(node.children, filter);
							if(count == 0){
								// directory is empty, hide
								rowElem.hide();
							} else {
								childrenCount++;
							}
						}
					} else {
						// leaf
						if(remove){
							rowElem.hide();
						} else {
							childrenCount++;
						}
					}
				}
				return childrenCount;
		   }
		   jQuery('.col-pick-watermark').keyup(function(){
				var filter = this.value;
				// reset the tree
				collection_picker.render();
				// filtering
				if(filter != ''){
					handleChildren(collection_picker.root.children, filter);
				}
		   });
		   setTimeout(function() {
	    	   
	          var nodes = collection_picker.getNodesByProperty('contentStyle' , 'nodeselected');
	          if(nodes){
		          for(var i = 0; isLessThanNumber(i, nodes.length); i++) {
			          var node = nodes[i];
		              node.highlightState = 1;
		              node = node.parent;
		              while(node != null){
			              node.expanded = 'true';
						  node = node.parent;
				      }
		          }
	          }
	          collection_picker.handleNodeSelection = function(args) {
		      		var target = YAHOO.util.Event.getTarget(args.event);
		          	if(YAHOO.util.Dom.hasClass(target, 'not-the-checkbox')){
			          	if(target.tagName == 'A'){
				      	  	var data = new Object();
				      	  	data.productId = target.className.substring(not_the_checkbox.length + 1);
				      	  	data.collectionId = '';
				      	  	data.presentType = '#{presentType}';
				      	  	data.icd = '#{icd}';
					      	collection_picker_present(data);
				    		return false;
			          	}
		      	  	} else {
		      	  		var max = parseInt('0#{max}');
			      	  	if(max == 0){
							// a max of 0 doesn't make any sense, it means max is undefined.
							max = 999;
						}
						if(!args.node.isLeaf){
							if(max != 999){
								// do nothing
							}
						} else if(args.node.highlightState == 0){
		      	  			var selectedCount = collection_picker_updateTree();
			      	  		if(selectedCount != max){
			      				this.onEventToggleHighlight(args);
			      				collection_picker_updateTree();
			      	  		}
						} else {
							this.onEventToggleHighlight(args);
			      			collection_picker_updateTree();
						}
				    }
		    	};
	          
		      collection_picker.render();
	          collection_picker_updateTree();
	          
	       }, 300);
	    });
	
	    function collection_picker_updateTree(){
	    	 var selected,
	         nodes = collection_picker.getNodesByProperty('highlightState', 1),
	         rowKeys = [];
	         var countLeafs = 0;
	         
	         if(nodes) {
	            for(var i = 0; isLessThanNumber(i, nodes.length); i++) {
	               rowKeys.push(nodes[i].data.rowKey);
	               if(nodes[i].children.length == 0){
						countLeafs = countLeafs + 1;
			       }
	            }
	            
	            selected = rowKeys.join(',');
	         } else {
	            selected = '';
	         }
	         var elem = document.getElementById(collection_picker.clientId + '_selection');
	         if(elem != null){
	         	elem.value = selected;
	         } else {
		         // tree is not displayed
				return -1;
			 }
	         return countLeafs;
	    }

	    function collection_picker_validate(){
			var min = parseInt('0#{min}');
			var max = parseInt('0#{max}');
			if(max == 0){
				// a max of 0 doesn't make any sense, it means max is undefined.
				max = 999;
			}
			var count = collection_picker_updateTree();

			if(count == -1){ 
				return true;
			}
			
			var validated = false;
			
			if(isLessThanNumberOrEqual(count, max)){
				if(isGreaterThanNumberOrEqual(count, min)){
					validated = true;	
				} else {
					alert('Select at least ' + min + ' collection(s). You selected ' + count + '.');
				}
			} else {
				alert('Select at most ' + max + ' collection(s). You selected ' + count + '.');
			}
			return validated;
	    }
		</script>
	</a4j:outputPanel>
</ui:composition>

</html>